//@version=5
//@author="Potenz"
indicator(title="4 EMA + VWAP + Supertrend by Potenz", shorttitle="4EMA + VWAP +Supertrend", overlay=true, timeframe="", timeframe_gaps=true)

// Moving Averages Settings
one = input.bool(true, title = "Enable 1st MA",group = "Moving Average Settings")
a = input.bool(true, title="Enable 2nd MA",group = "Moving Average Settings")
b = input.bool(true, title="Enable 3rd MA",group = "Moving Average Settings")
c = input.bool(true, title="Enable 4rd MA",group = "Moving Average Settings")
len = input.int(9, minval=1, title="Length",group = "Moving Average Settings")
len2 = input.int(21, minval=1, title="Length2",group = "Moving Average Settings")
len3 = input.int(55, minval=1, title="Length3",group = "Moving Average Settings")
len4 = input.int(100, minval=1, title="Length4",group = "Moving Average Settings")

src = input(close, title="Source")
src2 = input(close, title="Source2")
src3 = input(close, title="Source3")
src4 = input(close, title="Source4")

out = ta.ema(src, len)
out2 = ta.ema(src2, len2)
out3 = ta.ema(src3, len3)
out4 = ta.ema(src4, len4)

plot(one ? out: na, title="EMA", color=color.rgb(35, 255, 251))
plot(a ? out2: na, title="EMA2", color=color.blue)
plot(b ? out3: na, title="EMA3", color=color.rgb(156, 105, 202))
plot(c ? out4: na, title="EMA4", color=color.red)


// VWAP Settings
enableVWAP = input.bool(true, title="Enable VWAP",group = "VWAP Settings")
hideonDWM = input(true, title="Hide VWAP on 1D or Above", group="VWAP Settings", display = display.data_window)
var anchor = input.string(defval = "Session", title="Anchor Period",
 options=["Session", "Week", "Month", "Quarter", "Year", "Decade", "Century", "Earnings", "Dividends", "Splits"], group="VWAP Settings")
src_vwap = input(title = "Source", defval = hlc3, group="VWAP Settings", display = display.data_window)
offset_vwap = input.int(0, title="Offset", group="VWAP Settings", minval=0, display = display.data_window)

if barstate.islast and ta.cum(volume) == 0
    runtime.error("No volume is provided by the data vendor.")

new_earnings = request.earnings(syminfo.tickerid, earnings.actual, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)
new_dividends = request.dividends(syminfo.tickerid, dividends.gross, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)
new_split = request.splits(syminfo.tickerid, splits.denominator, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)

isNewPeriod = switch anchor
	"Earnings"  => not na(new_earnings)
	"Dividends" => not na(new_dividends)
	"Splits"    => not na(new_split)
	"Session"   => timeframe.change("D")
	"Week"      => timeframe.change("W")
	"Month"     => timeframe.change("M")
	"Quarter"   => timeframe.change("3M")
	"Year"      => timeframe.change("12M")
	"Decade"    => timeframe.change("12M") and year % 10 == 0
	"Century"   => timeframe.change("12M") and year % 100 == 0
	=> false

isEsdAnchor = anchor == "Earnings" or anchor == "Dividends" or anchor == "Splits"
if na(src_vwap[1]) and not isEsdAnchor
	isNewPeriod := true

float vwapValue = na

if not (hideonDWM and timeframe.isdwm)
    [_vwap, _stdevUpper, _] = ta.vwap(src_vwap, isNewPeriod, 1)
	vwapValue := _vwap

plot(enableVWAP ? vwapValue: na, title="VWAP", color=#2962FF, offset=offset_vwap)



//Supertrend Settings

atrPeriod = input.int(10,    "ATR Length", group="Supertrend Settings", minval = 1)
atr_factor =    input.float(3.0, "Factor", group="Supertrend Settings",  minval = 0.01, step = 0.01)
showSupertrend = input.bool(true, "Show Supertrend", group="Supertrend Settings")

[supertrend, direction_supertrend] = ta.supertrend(atr_factor, atrPeriod)

supertrend := showSupertrend ? (barstate.isfirst ? na : supertrend) : na
upTrend =    plot(direction_supertrend < 0 ? supertrend : na, "Up Trend",   color = color.green, style = plot.style_linebr)
downTrend =  plot(direction_supertrend < 0 ? na : supertrend, "Down Trend", color = color.red,   style = plot.style_linebr)
bodyMiddle = plot(barstate.isfirst ? na : (open + close) / 2, "Body Middle",display = display.none)

fill(bodyMiddle, upTrend,   color.new(color.green, 90), fillgaps = false)
fill(bodyMiddle, downTrend, color.new(color.red,   90), fillgaps = false)

alertcondition(showSupertrend and direction_supertrend[1] > direction_supertrend, title='Downtrend to Uptrend', message='The Supertrend value switched from Downtrend to Uptrend')
alertcondition(showSupertrend and direction_supertrend[1] < direction_supertrend, title='Uptrend to Downtrend', message='The Supertrend value switched from Uptrend to Downtrend')
alertcondition(showSupertrend and direction_supertrend[1] != direction_supertrend, title='Trend Change', message='The Supertrend value switched from Uptrend to Downtrend or vice versa')

